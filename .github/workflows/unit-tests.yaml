name: Unit Tests
on:
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch:
jobs:
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry install

      - name: Run unit tests
        shell: bash
        run: |
          poetry run pytest --cov=src src/

      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: |
          echo "$GITHUB_CONTEXT"

#      - name: Get Labels
#        id: getlabels
#        env:
#          GH_TOKEN: ${{ github.token }}
#        run: |
#          echo labels=$(gh api -H "Accept: application/vnd.github+json" /repos/mrastartes/orca/issues/${{ github.event.pull_request.number }}/labels | jq '[.[].name]') >> $GITHUB_OUTPUT

      - uses: actions/github-script@v6
        id: set-result
        with:
          retries: 3
          script: |
            github.rest.issues.get({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
            })

      - name: Get result
        run: |
          echo "${{steps.set-result.outputs.result}}"
          echo "${{steps.set-result.outputs.result}}" | jq '[.[].name]'

      - name: Process coverage files
        env:
          COVERAGE_RCFILE: "pyproject.toml"
        run: |
          poetry run coverage report --debug=sys,config,callers
          poetry run coverage xml --debug=sys,config,callers
          poetry run diff-cover coverage.xml --html-report coverage.html --config-file pyproject.toml

      - name: GitHub Coverage
        uses: orgoro/coverage@v3.1
        if: github.event_name == 'pull_request'
        with:
          coverageFile: coverage.xml
          token: ${{ secrets.GITHUB_TOKEN }}
          thresholdNew: 0
          thresholdModified: 0
          thresholdAll: 0

      - name: Upload code coverage reports as artifacts
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          retention-days: 1
          path: |
            coverage.xml
            coverage.html
            .coverage

      - name: Test
        run: |
          echo ${{ steps.getlabels.outputs.labels }}

      - name: Check coverage thresholds
        if: ${{ !contains(steps.getlabels.outputs.labels, 'break-glass-merge') }}
        env:
          COVERAGE_RCFILE: "pyproject.toml"
        run: |
          poetry run diff-cover coverage.xml --config-file pyproject.toml --fail-under 90
